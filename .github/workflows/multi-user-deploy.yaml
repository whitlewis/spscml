name: Multi-User Deploy

on:
  push:
    branches: ['jack_deploys', '*_deploys']
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tesseract: 
          - { name: tanh_sheath, path: tesseracts/sheaths/tanh_sheath, needs_gpu: false }
          - { name: vlasov_sheath, path: tesseracts/sheaths/vlasov, needs_gpu: true }
          - { name: wdm, path: tesseracts/wdm, needs_gpu: false }
    steps:
      - uses: actions/checkout@v4

      - name: Extract username from branch
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          USERNAME=${BRANCH_NAME%_deploys}
          echo "USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "Deploying for user: $USERNAME"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.HACKATHON_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.HACKATHON_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag tesseract image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hackathon
          TESSERACT_NAME: ${{ matrix.tesseract.name }}
          TESSERACT_PATH: ${{ matrix.tesseract.path }}
        run: |
          # Create user-prefixed image tag
          USER_IMAGE_TAG="${{ env.USERNAME }}-${TESSERACT_NAME}"
          echo "Building image with tag: $USER_IMAGE_TAG"
          
          # Use appropriate config and requirements based on GPU needs
          if [[ "${{ matrix.tesseract.needs_gpu }}" == "true" ]]; then
            cp ${TESSERACT_PATH}/tesseract_config_gpu.yaml ${TESSERACT_PATH}/tesseract_config.yaml
            cp ${TESSERACT_PATH}/tesseract_requirements_gpu.txt ${TESSERACT_PATH}/tesseract_requirements.txt
          else
            # Keep existing non-GPU configs (don't overwrite)
            echo "Using existing CPU configs for ${TESSERACT_PATH}"
          fi
          
          # Write custom build steps to tesseract config
          cat << 'EOF' >> ${TESSERACT_PATH}/tesseract_config.yaml
          EOF

          # Debug: show final config
          echo "=== Final tesseract_config.yaml ==="
          cat ${TESSERACT_PATH}/tesseract_config.yaml
          echo "==================================="

          # Build and tag image
          pip install tesseract-core
          tesseract --loglevel debug build ${TESSERACT_PATH} --tag $USER_IMAGE_TAG
          docker tag ${TESSERACT_NAME}:$USER_IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$USER_IMAGE_TAG

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hackathon
          TESSERACT_NAME: ${{ matrix.tesseract.name }}
        run: |
          USER_IMAGE_TAG="${{ env.USERNAME }}-${TESSERACT_NAME}"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$USER_IMAGE_TAG
      
      - name: Deploy to AWS ECS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.HACKATHON_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.HACKATHON_SECRET_ACCESS_KEY }}
          TESSERACT_NAME: ${{ matrix.tesseract.name }}
        run: |
          USER_TESSERACT_NAME="${{ env.USERNAME }}-${TESSERACT_NAME}"
          pip install boto3
          if [[ "${{ matrix.tesseract.needs_gpu }}" == "false" ]]; then
            python tesseracts/container_management.py --tesseract $USER_TESSERACT_NAME --no-gpu
          else
            python tesseracts/container_management.py --tesseract $USER_TESSERACT_NAME
          fi
